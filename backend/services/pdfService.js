import PDFDocument from 'pdfkit';
import fs from 'fs';
import path from 'path';
import QRCode from 'qrcode';

class PDFService {
  // Generate health card PDF
  async generateHealthCardPDF(healthCardData, outputPath) {
    return new Promise((resolve, reject) => {
      try {
        // Create a document
        const doc = new PDFDocument({
          size: 'A4',
          margin: 50
        });

        // Create write stream
        const writeStream = fs.createWriteStream(outputPath);
        doc.pipe(writeStream);

        // Add content to the PDF
        this.addHealthCardContent(doc, healthCardData);

        // Finalize the PDF and end the stream
        doc.end();

        writeStream.on('finish', () => {
          resolve(outputPath);
        });

        writeStream.on('error', (err) => {
          reject(err);
        });
      } catch (error) {
        reject(error);
      }
    });
  }

  // Add health card content to PDF
  addHealthCardContent(doc, healthCardData) {
    // Set title
    doc.fontSize(24).fillColor('#1e40af').text('Kerala Migrant Workers', { align: 'center' });
    doc.fontSize(18).fillColor('#000000').text('Digital Health Card', { align: 'center' });
    doc.moveDown(1);

    // Add horizontal line
    doc.moveTo(50, doc.y)
       .lineTo(550, doc.y)
       .stroke();

    doc.moveDown(1);

    // Health card details
    doc.fontSize(12).fillColor('#000000');

    // First column
    let yPos = doc.y;
    doc.text(`Unique ID: ${healthCardData.healthId || healthCardData.uniqueId}`, 50, yPos);
    doc.text(`Name: ${healthCardData.name}`, 50, yPos + 20);
    doc.text(`Date of Birth: ${healthCardData.dateOfBirth || healthCardData.dob}`, 50, yPos + 40);
    doc.text(`Blood Group: ${healthCardData.bloodGroup}`, 50, yPos + 60);
    doc.text(`Mobile: ${healthCardData.mobile || healthCardData.emergencyContact}`, 50, yPos + 80);

    // Second column
    const rightColumnX = 300;
    doc.text(`Email: ${healthCardData.email || 'N/A'}`, rightColumnX, yPos);
    doc.text(`Address: ${healthCardData.address || 'N/A'}`, rightColumnX, yPos + 20);
    doc.text(`District: ${healthCardData.district}`, rightColumnX, yPos + 40);
    doc.text(`Issue Date: ${new Date(healthCardData.issueDate || healthCardData.issuedDate).toLocaleDateString()}`, rightColumnX, yPos + 60);
    doc.text(`Valid Till: ${new Date(healthCardData.validTill).toLocaleDateString()}`, rightColumnX, yPos + 80);

    doc.moveDown(2);

    // Add QR code section title
    doc.fontSize(14).text('QR Code:', 50, doc.y);
    
    // Draw a placeholder rectangle for QR code
    doc.rect(50, doc.y + 10, 150, 150).stroke();
    doc.fontSize(10).text('(QR code placeholder)', 60, doc.y + 85);

    doc.moveDown(12);

    // Add footer
    doc.fontSize(10).fillColor('#666666')
       .text('Generated by Kerala Government Digital Health Record Management System', 50, 750, {
         width: 500,
         align: 'center'
       });

    // Add disclaimer
    doc.fontSize(8).text('This is an official health card issued by the Kerala Government. Please keep it safe.', 50, 770, {
      width: 500,
      align: 'center'
    });
  }

  // Generate health card PDF and return as buffer
  async generateHealthCardPDFBuffer(healthCardData) {
    // Generate QR code data
    const qrData = JSON.stringify({
      id: healthCardData.healthId || healthCardData.uniqueId,
      name: healthCardData.name,
      type: 'health-card',
      issuedBy: 'Kerala Government'
    });

    // Create a temporary file path for the QR code
    const tempQRPath = path.join(process.cwd(), 'temp_qr_buffer.png');
    
    try {
      // Generate QR code first and wait for completion
      await new Promise((resolve, reject) => {
        QRCode.toFile(tempQRPath, qrData, {
          width: 150,
          margin: 2,
          color: {
            dark: '#000000',
            light: '#ffffff'
          }
        }, (err) => {
          if (err) {
            reject(err);
          } else {
            resolve();
          }
        });
      });
      
      // Now create the PDF with the QR code
      return new Promise((resolve, reject) => {
        try {
          // Create a document
          const doc = new PDFDocument({
            size: 'A4',
            margin: 50
          });

          const chunks = [];
          doc.on('data', (chunk) => chunks.push(chunk));
          doc.on('end', () => {
            // Clean up the temporary file
            if (fs.existsSync(tempQRPath)) {
              fs.unlinkSync(tempQRPath);
            }
            const buffer = Buffer.concat(chunks);
            resolve(buffer);
          });
          doc.on('error', (err) => {
            // Clean up the temporary file on error
            if (fs.existsSync(tempQRPath)) {
              fs.unlinkSync(tempQRPath);
            }
            reject(err);
          });

          // Add content to the PDF
          this.addHealthCardContentWithQR(doc, healthCardData, tempQRPath);

          // Finalize the PDF
          doc.end();
        } catch (error) {
          // Clean up the temporary file on error
          if (fs.existsSync(tempQRPath)) {
            fs.unlinkSync(tempQRPath);
          }
          reject(error);
        }
      });
    } catch (error) {
      console.error('Error generating QR code for buffer:', error);
      // If QR code generation fails, create PDF without QR code
      return new Promise((resolve, reject) => {
        try {
          // Create a document
          const doc = new PDFDocument({
            size: 'A4',
            margin: 50
          });

          const chunks = [];
          doc.on('data', (chunk) => chunks.push(chunk));
          doc.on('end', () => {
            const buffer = Buffer.concat(chunks);
            resolve(buffer);
          });
          doc.on('error', (err) => {
            reject(err);
          });

          // Add content to the PDF without QR code
          this.addHealthCardContentWithoutQR(doc, healthCardData);

          // Finalize the PDF
          doc.end();
        } catch (error) {
          reject(error);
        }
      });
    }
  }

  // Add health card content to PDF with QR code
  addHealthCardContentWithQR(doc, healthCardData, qrImagePath) {
    // Set title
    doc.fontSize(24).fillColor('#1e40af').text('Kerala Migrant Workers', { align: 'center' });
    doc.fontSize(18).fillColor('#000000').text('Digital Health Card', { align: 'center' });
    doc.moveDown(1);

    // Add horizontal line
    doc.moveTo(50, doc.y)
       .lineTo(550, doc.y)
       .stroke();

    doc.moveDown(1);

    // Health card details
    doc.fontSize(12).fillColor('#000000');

    // First column
    let yPos = doc.y;
    doc.text(`Unique ID: ${healthCardData.healthId || healthCardData.uniqueId}`, 50, yPos);
    doc.text(`Name: ${healthCardData.name}`, 50, yPos + 20);
    doc.text(`Date of Birth: ${healthCardData.dateOfBirth || healthCardData.dob}`, 50, yPos + 40);
    doc.text(`Blood Group: ${healthCardData.bloodGroup}`, 50, yPos + 60);
    doc.text(`Mobile: ${healthCardData.mobile || healthCardData.emergencyContact}`, 50, yPos + 80);

    // Second column
    const rightColumnX = 300;
    doc.text(`Email: ${healthCardData.email || 'N/A'}`, rightColumnX, yPos);
    doc.text(`Address: ${healthCardData.address || 'N/A'}`, rightColumnX, yPos + 20);
    doc.text(`District: ${healthCardData.district}`, rightColumnX, yPos + 40);
    doc.text(`Issue Date: ${new Date(healthCardData.issueDate || healthCardData.issuedDate).toLocaleDateString()}`, rightColumnX, yPos + 60);
    doc.text(`Valid Till: ${new Date(healthCardData.validTill).toLocaleDateString()}`, rightColumnX, yPos + 80);

    doc.moveDown(2);

    // Add QR code section title
    doc.fontSize(14).text('QR Code:', 50, doc.y);
    
    // Embed the QR code image in the PDF
    try {
      if (fs.existsSync(qrImagePath)) {
        doc.image(qrImagePath, 50, doc.y + 10, { width: 150, height: 150 });
      } else {
        // Draw a placeholder rectangle if QR code image doesn't exist
        doc.rect(50, doc.y + 10, 150, 150).stroke();
        doc.fontSize(10).text('(QR code failed to generate)', 60, doc.y + 85);
      }
    } catch (error) {
      console.error('Error embedding QR code in buffer:', error);
      // Draw a placeholder rectangle if image embedding fails
      doc.rect(50, doc.y + 10, 150, 150).stroke();
      doc.fontSize(10).text('(QR code failed to generate)', 60, doc.y + 85);
    }

    // Move down to make space for the QR code
    doc.moveDown(12);

    // Add footer
    doc.fontSize(10).fillColor('#666666')
       .text('Generated by Kerala Government Digital Health Record Management System', 50, 750, {
         width: 500,
         align: 'center'
       });

    // Add disclaimer
    doc.fontSize(8).text('This is an official health card issued by the Kerala Government. Please keep it safe.', 50, 770, {
      width: 500,
      align: 'center'
    });
  }

  // Add health card content to PDF without QR code (fallback)
  addHealthCardContentWithoutQR(doc, healthCardData) {
    // Set title
    doc.fontSize(24).fillColor('#1e40af').text('Kerala Migrant Workers', { align: 'center' });
    doc.fontSize(18).fillColor('#000000').text('Digital Health Card', { align: 'center' });
    doc.moveDown(1);

    // Add horizontal line
    doc.moveTo(50, doc.y)
       .lineTo(550, doc.y)
       .stroke();

    doc.moveDown(1);

    // Health card details
    doc.fontSize(12).fillColor('#000000');

    // First column
    let yPos = doc.y;
    doc.text(`Unique ID: ${healthCardData.healthId || healthCardData.uniqueId}`, 50, yPos);
    doc.text(`Name: ${healthCardData.name}`, 50, yPos + 20);
    doc.text(`Date of Birth: ${healthCardData.dateOfBirth || healthCardData.dob}`, 50, yPos + 40);
    doc.text(`Blood Group: ${healthCardData.bloodGroup}`, 50, yPos + 60);
    doc.text(`Mobile: ${healthCardData.mobile || healthCardData.emergencyContact}`, 50, yPos + 80);

    // Second column
    const rightColumnX = 300;
    doc.text(`Email: ${healthCardData.email || 'N/A'}`, rightColumnX, yPos);
    doc.text(`Address: ${healthCardData.address || 'N/A'}`, rightColumnX, yPos + 20);
    doc.text(`District: ${healthCardData.district}`, rightColumnX, yPos + 40);
    doc.text(`Issue Date: ${new Date(healthCardData.issueDate || healthCardData.issuedDate).toLocaleDateString()}`, rightColumnX, yPos + 60);
    doc.text(`Valid Till: ${new Date(healthCardData.validTill).toLocaleDateString()}`, rightColumnX, yPos + 80);

    doc.moveDown(2);

    // Add QR code section title
    doc.fontSize(14).text('QR Code:', 50, doc.y);
    
    // Draw a placeholder rectangle if no QR code image is available
    doc.rect(50, doc.y + 10, 150, 150).stroke();
    doc.fontSize(10).text('(QR code failed to generate)', 60, doc.y + 85);

    // Move down to make space for the QR code
    doc.moveDown(12);

    // Add footer
    doc.fontSize(10).fillColor('#666666')
       .text('Generated by Kerala Government Digital Health Record Management System', 50, 750, {
         width: 500,
         align: 'center'
       });

    // Add disclaimer
    doc.fontSize(8).text('This is an official health card issued by the Kerala Government. Please keep it safe.', 50, 770, {
      width: 500,
      align: 'center'
    });
  }
}

export default new PDFService();